name: CI with Separated DB Job

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  db:
    name: DB Setup & Dump
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Start MySQL container
        run: |
          docker run -d --name mysql-db \
            -e MYSQL_DATABASE=test \
            -e MYSQL_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }} \
            -e MYSQL_USER=${{ secrets.DB_USER }} \
            -e MYSQL_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -p 3801:3306 \
            mysql:8.0 \
            --default-authentication-plugin=mysql_native_password

      - name: Wait for MySQL
        run: |
          until docker exec mysql-db mysqladmin ping \
            -h127.0.0.1 --silent \
            --user=root --password=${{ secrets.DB_ROOT_PASSWORD }}; do
            sleep 1
          done

      - name: Seed sample table & data
        run: |
          docker exec mysql-db mysql \
            --user=root --password=${{ secrets.DB_ROOT_PASSWORD }} \
            --database=test \
            -e "
              CREATE TABLE IF NOT EXISTS sample (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(50) NOT NULL
              );
              INSERT INTO sample (name) VALUES
                ('Alice'),('Bob'),('Charlie')
              ON DUPLICATE KEY UPDATE name=name;
            "

      - name: Dump database to SQL
        run: |
          docker exec mysql-db mysqldump \
            --user=${{ secrets.DB_USER }} \
            --password=${{ secrets.DB_PASSWORD }} \
            test \
            > dump.sql

      - name: Upload DB dump artifact
        uses: actions/upload-artifact@v3
        with:
          name: db-dump
          path: dump.sql

  app:
    name: App: Restore DB & Run Scripts
    needs: db
    runs-on: ubuntu-latest

    steps:
      - name: Download DB dump artifact
        uses: actions/download-artifact@v3
        with:
          name: db-dump

      - name: Checkout code (for Node/C# & commit)
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0
          persist-credentials: true

      - name: Start MySQL container
        run: |
          docker run -d --name mysql-app \
            -e MYSQL_DATABASE=test \
            -e MYSQL_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }} \
            -e MYSQL_USER=${{ secrets.DB_USER }} \
            -e MYSQL_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -p 3802:3306 \
            mysql:8.0 \
            --default-authentication-plugin=mysql_native_password

      - name: Wait for MySQL
        run: |
          until docker exec mysql-app mysqladmin ping \
            -h127.0.0.1 --silent \
            --user=root --password=${{ secrets.DB_ROOT_PASSWORD }}; do
            sleep 1
          done

      - name: Restore database from dump
        run: |
          docker exec -i mysql-app mysql \
            --user=${{ secrets.DB_USER }} \
            --password=${{ secrets.DB_PASSWORD }} \
            test \
            < dump.sql

      - name: Setup Node.js & Install deps
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - run: npm install mysql2 axios jsdom

      - name: Run DB reader & save JSON
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3802
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: test
        run: node page/read-db.js

      - name: Fetch last lotto round & save JSON
        run: node page/fetch-last-game.js

      - name: Commit JSON files back to repo
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add results.json lastGame.json
          if ! git diff --cached --quiet; then
            git commit -m "chore: update json outputs (automated)"
            git push https://x-access-token:${PAT}@github.com/${{ github.repository }}.git HEAD:main
          else
            echo "No JSON changes to commit"
          fi
